apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    def config = rootProject.ext

    compileSdkVersion config.androidCompileSdkVersion
    buildToolsVersion config.androidBuildToolsVersion

    defaultConfig {
        minSdkVersion config.androidMinSdkVersion
        targetSdkVersion config.androidTargetSdkVersion

        applicationId config.androidApplicationId
        versionCode config.androidVersionCode
        versionName config.androidVersionName
        testInstrumentationRunner config.testInstrumentationRunner
        testApplicationId config.testApplicationId
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            buildConfigField "String", "MYLB_HOST", "\"10.0.2.2\""
            buildConfigField "String", "API_URL", "\"http://10.0.2.2:8000/api/v1/\""
        }

        release {
            minifyEnabled false
            buildConfigField "String", "MYLB_HOST", "\"mylb.com.au\""
            buildConfigField "String", "API_URL", "\"https://mylb.com.au/api/v1/\""
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions.unitTests.all {
        testLogging {
            events              "passed", "skipped", "failed", "standardOut"
            showExceptions      true
            exceptionFormat     "full"
            showCauses          true
            showStackTraces     true

            afterSuite { desc, result ->
                if (!desc.parent) {
                    def tests = "[${result.resultType}]: (${result.testCount} tests"
                    def passes = "${result.successfulTestCount} successes"
                    def fails = "${result.failedTestCount} failures"
                    def skips = "${result.skippedTestCount} skipped)"
                    def output = "${tests}, ${passes}, ${fails}, ${skips}"
                    def length = output.length()

                    println('\n' + ('-' * length) + '\n' + output + '\n' + ('-' * length))
                }
            }
        }
    }
}

kapt {
    generateStubs = true
}

dependencies {
    def libraries = rootProject.ext.libraries

    compile project(':domain')
    compile project(':data')

    provided libraries.javaxAnnotation

    // General
    compile libraries.dagger
    compile libraries.rxJava

    // Debug
    compile libraries.leakCanary
    compile libraries.timber

    // Android
    compile libraries.rxAndroid
    compile libraries.extrasDelegates
    compile libraries.androidAppCompat
    compile libraries.androidAnnotations
    compile libraries.androidRecyclerView
    compile libraries.androidConstraintLayout
    compile libraries.androidDesign

    // Kotlin
    compile libraries.kotlin
    compile libraries.rxKotlin
    compile libraries.rxBinding
    compile libraries.rxAppCompat
    compile libraries.rxDesign

    kapt libraries.daggerCompiler

    // Testing
    testCompile libraries.junit
    testCompile libraries.mockito
    testCompile libraries.kluent

    // Android Testing
    androidTestCompile libraries.mockito
    androidTestCompile libraries.androidTestRunner
    androidTestCompile libraries.androidTestRules
    androidTestCompile libraries.androidEspresso
    androidTestCompile libraries.androidEspressoIntents
    androidTestCompile libraries.androidUiAutomator
    androidTestCompile libraries.androidAnnotations
}
